%macro dunn(dataset,group,var,alpha);
***************************************************************;
* The Dunn Macro                                              *;
* ------------------------------------------------------------*;
*                                                             *;
* This macro is designed to perform all two-sided pair-wise   *;
* comparisons of the location parameters for n groups (n gt 2)*;
* in a one-way layout. The method for the procedure involves a*;
* large sample approximation. The method of comparison employs*;
* ranking all non-missing observations and averaging the ranks*;
* for each level of the class variable (GROUP).               *;
*                                                             *;
* The required inputs for the macro are a SAS data set        *;
* (DATASET) containing a character class variable (GROUP),    *;
* a response variable (VAR) and a family-wise error rate      *;
* (ALPHA).                                                    *;
*                                                             *;
* For more details on this nonparametric multiple comparison  *;
* procedure, see Hollander and Wolfe s Nonparametric          *;
* Statistical Methods, 1/e p. 125.                            *;
*                                                             *;
* Overall Macro Scheme:                                       *;
* --------------------                                        *;
* The macro consists of a body of code containing one embedded*;
* macro (GROUPS). The embedded macro determines the number of*;
* groups present (NGRPS). If a group in the SAS data set does *;
* not contain at least one response value, it will not be     *;
* included in the analysis. The embedded macro also creates   *;
* one global macro variable that contains the group labels    *;
* (GRPVEC) for the levels of the class variable.              *;
*                                                             *;
* The main body of the SAS macro code determines summary      *;
* statistics (e.g., average ranks, sample sizes, etc.) This   *;
* information is then employed to calculate the pair-wise     *;
* test statistics. The cutoff for the test statistic is       *;
* calculated with PROBIT function. The results are then       *;
* printed out with a PROC PRINT procedure.                    *;
*                                                             *;
***************************************************************;

* First, take the input data set &dataset and eliminate missing values;
data &dataset.2;
    set &dataset;
    if &var ne .;
    run;

%macro groups;
* This macro creates two outputs:                         *;
* (1) The total number of groups present (NGRPS)          *; 
* (2) A macro variable that contains all of the individual*;
*     class variable labels (GRPVEC)                      *;
%global grpvec;
proc sort data=&dataset.2; 
    by &group;
* Create a data set that contains just the levels of the class variable (group);
data &group; 
    set &dataset.2; 
    by &group;
    if first.&group;
proc transpose data=&group out=grpvec; 
    var &group;
* Determine the number of levels of the class variable;
data _null_;
    call symput('ngrps',left(put(count,8.)));
    stop;
    set &group nobs=count;
    run;
* Create a global macro variable containing the labels for each level of the class variable;
data null; 
    set grpvec;
    grpvec=
    %do g=1 %to %eval(&ngrps-1);
        trim(left(col&g))||" "||
    %end;
    trim(left(col&ngrps));
    call symput('grpvec',grpvec);
    run;
%mend groups;
%groups;
proc sort data=&dataset.2;
    by &group;
* Rank all non-missing responses;
proc rank data=&dataset.2 out=r&var;
    ranks r&var;
    var &var;
proc sort data=r&var;
    by &group;
* Calculate the average of the ranks for each group;
proc univariate noprint data=r&var;
    var r&var;
    by &group;
    output out=s&var sum=s&var n=n&var;
* Determine the total sample size for the entire experiment;
proc univariate noprint data=s&var;
    var n&var;
    output out=sn&var sum=sn&var;
*C reate a macro variable with value equal to the total sample size for the entire experiment;
data _null_;
    set sn&var;
    call symput("n",left(put(sn&var,8.)));
    run;
data sr&var; 
    set s&var;
    keep s&var;
data n&var; 
    set s&var;
    keep n&var;
proc transpose data=sr&var out=srvec; 
    var s&var;
* Create a macro variable containing the summary statistics (average ranks) for each group;
data _null_;
    set srvec;
    srvec=
    %do s=1 %to %eval(&ngrps-1);
        trim(left(put(col&s,11.3)))||" "||
    %end;
    trim(left(put(col&ngrps,11.3)));
    call symput('srvec',srvec);
    run;
proc transpose data=n&var out=nvec; 
    var n&var;
* Create a macro variable containing the sample sizes for each level of the class variable;
data _null_;
    set nvec;
    nvec=
    %do s2=1 %to %eval(&ngrps-1);
        trim(left(put(col&s2,8.)))||" "||
    %end;
    trim(left(put(col&ngrps,8.)));
    call symput('nvec',nvec);
    run;
* Perform the pair-wise large sample approximation mcp;
data nparmcp;
    %do u=1 %to &ngrps;
        %do v=%eval(&u+1) %to &ngrps;
            %let rsum&u=%scan(&srvec,&u," ");
            %let n&u=%scan(&nvec,&u," ");
            %let rsum&v=%scan(&srvec,&v," ");
            %let n&v=%scan(&nvec,&v," ");
            c+1;
            difflbl="%scan(&grpvec,&u," ")-%scan(&grpvec,&v," ")";
            avdiff=abs((&&rsum&u/&&n&u)-(&&rsum&v/&&n&v));
            cutoff=probit(1-(&alpha/((&ngrps*(&ngrps-1)))))*(((&n*(&n+1))/12)**0.5)*((1/&&n&u + 1/&&n&v)**0.5);
            symbol="  ";
            if avdiff>=cutoff then do;
                symbol="**";
            end;
         output;
         %end;
    %end;
    label difflbl="Group@comparisons"
          avdiff="Difference@in@average@ranks"
          cutoff="Cutoff@at@alpha=&alpha"
          symbol="Significance@difference = **"
          c="Comparison@number"
    ;
    title1 "Large sample approximation multiple comparison procedure";
    title2 "designed for unbalanced data";
    title3 "%trim(%left(&ngrps)) groups: %trim(%left(&grpvec)) (respective sample sizes: %trim(%left(&nvec)))";
    title4 "Alpha = &alpha";
* Print out the results of the test;
proc print label split='@' noobs;
    run;
%mend dunn;

/******************************************************************************************/
/********************************** Course:  Stat 2509           **************************/
/********************************** Project: Lecture-3(CRD-RBD)  **************************/ 
/********************************** Author:  Dr. Fares Said      **************************/ 
/********************************** Date:    Nov 2019            **************************/ 
/******************************************************************************************/

FOOTNOTE1 "Course: Stat 2509    Lecture-3 (CRD-RBD)";
FOOTNOTE2 "Student Name: Your Name  Student ID: 1245639987";

ODS TRACE OUTPUT;

/* Recall the Octane data from last week's lab: */
 
/* Suppose that the effect of a gasoline additive in octane is of interest. An investigator obtains 20
one-liter samples of gasoline and randomly divides these samples into 5 groups of 4 samples each.
The groups are assigned to receive 0, 1, 2, 3, or 4 cc/liter of additive and octane measurements
are made. */ 

/* Perform Dunn's procedure, use alpha = 0.10 */ 

/* First, we import the data into SAS */ 
Data Octane;
	ATTRIB Group LABEL = "Treatment";
	ATTRIB Y LABEL = "Gasoline";
	INPUT Group$ Y @@;
	DATALINES;
A 91.7 A 91.2 A 90.9 A 90.6 B 91.7 B 91.9 B 90.9 B 90.9 
C 92.4 C 91.2 C 91.6 C 91.0 D 91.8 D 92.2 D 92.0 D 91.4 
E 93.1 E 92.9 E 92.4 E 92.4
;
RUN;

/* We use Dunn's procedure as a post-hoc analysis when we reject the null hypothesis from the 
Kruskal-Wallis H test. Recall that the Kruskal-Wallis H test is a non-parametric procedure, 
and the null hypothesis is that the distribution of the groups is the same. In other words, when
we rejected the null hypothesis of our Kruskal-Wallis H test last week, we concluded that the 
distribution of at least one of the 5 groups differs from the rest. */

/* Now, we want to follow up with our results and see which groups' distributions differ from each other. */ 

/* In Dunn's procedure, we are doing pairwise comparisons of the medians. For example, is the median of the
response variable different for 2cc/liter (group C or group "3")of additive vs. 3cc/liter of additive (
group 4 or group "D")? */ 

/* H0: median for group i = median for group j */
/* HA: median for group i =/= median for group j */ 

/* Find alpha* = alpha / (k*(k-1)) = 0.10 / (5*4) = 0.005 */

/* Find critical value: */
/* DUNN_{ij} = z_{alpha*} * sqrt{ ((n)(n+1) / 12) * (1/n_i + 1/n_j) } 
             = z_{0.005}  * sqrt{ ((20)(21) / 12) * (1/4 +   1/4)   }
             = 2.575829   * sqrt{ 17.5 }
             = 10.7755 
*/ 

/* Since we have 4 sampples for every single group, our critical value is the same for each of our 
5 choose 2 = 10 pairwise comparisons. */ 

/* Our test statistic is the absolute difference between the sample median of group i and group j.
If our test statistic is larger than our critical value, we reject H0 and conclude medians of the 
two groups are different. */ 

%dunn(Octane, group = Group, var = Y, alpha = 0.1);

/* From our SAS output, we see that the only pairs which we found to have significantly different medians
at level alpha = 0.10 were (group A and group E) and (group B and group E).
